{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "ASimNetworkSessionVMConnection",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Network Session ASIM parser for VM connection information collected using the Log Analytics Agent",
            "category": "ASIM",
            "FunctionAlias": "ASimNetworkSessionVMConnection",
            "query": "let SeverityLookup = datatable (EventOriginalSeverity: string, EventSeverity:string) [\n  '', 'Informational', \n  '0', 'Informational',\n  '1', 'Low',\n  '2', 'Medium',\n  '3', 'High'\n];\nlet outbound = (disabled:bool=false) {\n  VMConnection\n  | where not (disabled)\n  | where Direction == \"outbound\"\n  | extend\n      SrcAppType = \"Process\",\n      SrcHostnameType = \"Simple\",\n      DstGeoCountry = RemoteCountry,\n      DstGeoLongitude = RemoteLongitude,\n      DstGeoLatitude = RemoteLatitude,\n      SrcAppId = Process,\n      SrcAppName = ProcessName,\n      SrcDvcId = Machine\n  | extend hostelements = split(Computer,'.')\n  | extend \n      SrcHostname = tostring(hostelements[0]),\n      SrcDomain = strcat_array(array_slice(hostelements,1,-1), '.')\n  | extend\n      SrcDomainType = iff(SrcDomain != \"\", \"FQDN\", \"\"),\n      SrcFQDN = iff(SrcDomain != \"\", Computer, \"\")\n  | extend DstFQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\n  | extend DstDomainType = iff(DstFQDN != \"\", \"FQDN\", \"\")\n  | extend hostelements = split(DstFQDN,'.')\n  | extend \n      DstHostname = iff(DstFQDN != \"\", tostring(hostelements[0]), \"\"),\n      DstDomain = iff(DstFQDN != \"\", strcat_array(array_slice(hostelements,1,-1), '.'), \"\")\n  | project-away hostelements\n  | extend\n      RemoteFQDN = DstFQDN,\n      RemoteHostname = DstHostname,\n      RemoteDomain = DstDomain,\n      RemoteDomainType = DstDomainType,\n      LocalFQDN = SrcFQDN,\n      LocalHostname = SrcHostname,\n      LocalDomain = SrcDomain,\n      LocalDomainType = SrcDomainType,\n      LocalIpAddr = SourceIp\n};\nlet inbound = (disabled:bool=false) {\n  VMConnection\n  | where not (disabled)\n  | where Direction == \"inbound\"\n  | extend\n      DstAppType = \"Process\",\n      DstDvcIdType = \"VMConnectionId\",\n      SrcGeoCountry = RemoteCountry,\n      SrcGeoLongitude = RemoteLongitude,\n      SrcGeoLatitude = RemoteLatitude,\n      DstAppId = Process,\n      DstAppName = ProcessName,\n      DstDvcId = Machine\n  | extend hostelements = split(Computer,'.')\n  | extend \n      DstHostname = tostring(hostelements[0]),\n      DstDomain = strcat_array(array_slice(hostelements,1,-1), '.')\n  | extend\n      DstDomainType = iff(DstDomain != \"\", \"FQDN\", \"\"),\n      DstFQDN = iff(DstDomain != \"\", Computer, \"\")\n  | extend SrcFQDN = iff(RemoteDnsCanonicalNames == \"\", \"\", todynamic(RemoteDnsCanonicalNames)[0])\n  | extend SrcDomainType = iff(SrcFQDN != \"\", \"FQDN\", \"\")\n  | extend hostelements = split(SrcFQDN,'.')\n  | extend \n      SrcHostname = iff(SrcFQDN != \"\", tostring(hostelements[0]), \"\"),\n      SrcDomain = iff(SrcFQDN != \"\", strcat_array(array_slice(hostelements,1,-1), '.'), \"\")\n  | project-away hostelements\n  | extend\n      RemoteFQDN = SrcFQDN,\n      RemoteHostname = SrcHostname,\n      RemoteDomain = SrcDomain,\n      RemoteDomainType = SrcDomainType,\n      LocalFQDN = DstFQDN,\n      LocalHostname = DstHostname,\n      LocalDomain = DstDomain,\n      LocalDomainType = DstDomainType,\n      LocalIpAddr = DestinationIp\n};\nlet parser=(disabled:bool=false){\n  union outbound(disabled), inbound(disabled)\n  // Event fields\n  | extend \n    EventCount = toint(LinksEstablished), // -- prioritized over LinksLive and LinksTerminated\n    EventStartTime = TimeGenerated,\n    EventVendor = \"Microsoft\",\n    EventProduct = \"VMConnection\",\n    EventSchema = \"NetworkSession\",\n    EventSchemaVersion = \"0.2.2\",\n    EventType = \"EndpointNetworkSession\",\n    EventEndTime = TimeGenerated\n  | project-rename\n    DstIpAddr = DestinationIp,\n    DstPortNumber = DestinationPort, \n    SrcIpAddr = SourceIp, \n    NetworkSessionId = ConnectionId,\n    ThreatName = IndicatorThreatType,\n    NetworkDirection = Direction,\n    RemoteGeoCountry = RemoteCountry,\n    RemoteGeoLatitude = RemoteLatitude, \n    RemoteGeoLongitude = RemoteLongitude,\n    LocalAppId = Process,\n    LocalAppName = ProcessName,\n    DvcId = Machine,\n    RemoteIpAddr = RemoteIp\n  // -- Calculated fields\n  | extend EventOriginalSeverity = tostring(Severity)\n  | lookup SeverityLookup on EventOriginalSeverity\n  | extend\n    EventResult = \"Success\",\n    LocalAppType = \"Process\",\n    NetworkDuration = toint(ResponseTimeMax),\n    ThreatRiskLevel = toint(Confidence),\n    NetworkProtocol = toupper(Protocol),\n    SrcBytes = tolong(BytesSent),\n    DstBytes = tolong(BytesReceived)\n  // -- Aliases\n  | extend\n    IpAddr = RemoteIpAddr,\n    Src = SrcIpAddr,\n    Local = LocalIpAddr,\n    DvcIpAddr = LocalIpAddr,\n    Dst = DstIpAddr,\n    Remote = RemoteIpAddr,\n    Dvc = LocalHostname,\n    DvcHostname = LocalHostname,\n    DvcDomain = LocalDomain,\n    DvcDomainType = LocalDomainType,\n    DvcFQDN = LocalFQDN,\n    Hostname = RemoteHostname,\n    Duration = NetworkDuration,\n    SessionId = NetworkSessionId\n};\nparser (disabled)",
            "version": 1,
            "functionParameters": "disabled:bool=False"
          }
        }
      ]
    }
  ]
}
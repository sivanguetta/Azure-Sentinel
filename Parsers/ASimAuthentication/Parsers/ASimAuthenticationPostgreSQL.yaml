Parser:
  Title: Authentication ASIM parser for PostgreSQL
  Version: '0.1.1'
  LastUpdated: April 20, 2022
Product:
  Name: PostgreSQL
Normalization:
  Schema: Authentication
  Version: '0.1.1'
References:
- Title: ASIM Authentication Schema
  Link: https://aka.ms/ASimAuthenticationDoc
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports normalizing PostgreSQL sign in logs to the ASIM Authentication schema.
ParserName: ASimAuthenticationPostgreSQL
ParserParams:
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |
  let PostgreSQLSignInAuthorized=(disabled:bool=false){
  PostgreSQL_CL | where not(disabled)
    | where RawData has 'connection authorized'
    | extend
    EventVendor = 'PostgreSQL'
    , EventProduct = 'PostgreSQL'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Success'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    , DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'user=(.*?)\sdatabase', 1, RawData)
    , EventOriginalRestultDetails = 'Connection authorized'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  let PostgreSQLAuthFailure1=(disabled:bool=false){
  PostgreSQL_CL | where not(disabled)
    | where RawData has 'authentication failed'
    | extend 
    EventVendor = 'PostgreSQL'
    , EventProduct = 'PostgreSQL'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Failure'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    , DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'for user\s"(.*?)"', 1, RawData)
    , EventResultDetails = 'No such user or password'
    , EventOriginalRestultDetails = 'User authentication failed'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  let PostgreSQLAuthFailure2=(disabled:bool=false){
  PostgreSQL_CL | where not(disabled)
    | where RawData has_all ('role', 'does', 'not', 'exist')
    | extend 
    EventVendor = 'PostgreSQL'
    , EventProduct = 'PostgreSQL'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Failure'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    , DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'role\s"(.*?)"\sdoes', 1, RawData)
    , EventResultDetails = 'No such user or password'
    , EventOriginalRestultDetails = 'Role does not exist'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  let PostgreSQLAuthFailure3=(disabled:bool=false){
  PostgreSQL_CL | where not(disabled)
    | where RawData has_all ('no', 'entry', 'user')
    | extend 
    EventVendor = 'PostgreSQL'
    , EventProduct = 'PostgreSQL'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Failure'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logon'
    , DvcHostname = Computer
    , DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'user\s"(.*?)",', 1, RawData)
    , SrcIpAddr = extract(@'host\s"(.*?)",', 1, RawData)
    , EventResultDetails = 'No such user or password'
    , EventOriginalRestultDetails = 'No entry for user'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  let PostgreSQLDisconnect=(disabled:bool=false){
  PostgreSQL_CL | where not(disabled)
    | where RawData has 'disconnection'
    | extend 
    EventVendor = 'PostgreSQL'
    , EventProduct = 'PostgreSQL'
    , EventCount = int(1)
    , EventSchema = 'Authentication'
    , EventSchemaVersion = '0.1.1'
    , EventResult = 'Success'
    , EventStartTime = TimeGenerated
    , EventEndTime = TimeGenerated
    , EventType = 'Logoff'
    , DvcHostname = Computer
    , DvcIpAddr = extract(@'\d{1,3}\.\d{1.3}\.\d{1,3}\.\d{1,3}', 1, Computer)
    , TargetUsernameType = 'Simple'
    , TargetUsername = extract(@'user=(.*?)\sdatabase', 1, RawData)
    , SrcIpAddr = extract(@'host=\[?(.*?)\]?', 1, RawData)
    , EventResultDetails = 'Session expired'
    , EventOriginalRestultDetails = 'User session closed'
  // ************************ 
  //      <Aliases> 
  // ************************
  | extend
          User=TargetUsername
        , Dvc=Computer
  // ************************ 
  //      </Aliases> 
  // ************************
    | project-away Computer, MG, ManagementGroupName, RawData, SourceSystem, TenantId
    };
  union isfuzzy=false PostgreSQLSignInAuthorized(disabled), PostgreSQLAuthFailure1(disabled), PostgreSQLAuthFailure2(disabled), PostgreSQLAuthFailure3(disabled), PostgreSQLDisconnect(disabled)

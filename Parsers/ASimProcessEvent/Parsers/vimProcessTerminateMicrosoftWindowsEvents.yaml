Parser:
  Title: Process Terminate Event ASIM parser for WEF Security Events
  Version: '0.2.0'
  LastUpdated: Apr 30, 2022
Product:
  Name: Security Events
Normalization:
  Schema: ProcessEvent
  Version: '0.1.0'
References:
- Title: ASIM Process Schema
  Link: https://aka.ms/ASimProcessEventDoc 
- Title: ASIM
  Link: https:/aka.ms/AboutASIM
Description: |
  This ASIM parser supports filtering and normalizing Windows process terminate events (event 4689) collected using the WEF connector (WindowsEvent table) to the ASIM Process Event normalized schema. 
ParserName: vimProcessTerminateMicrosoftWindowsEvents
EquivalentBuiltInParser: _Im_ProcessTerminate_MicrosoftWindowsEvents
ParserParams:
  - Name: starttime
    Type: datetime
    Default: datetime(null)
  - Name: endtime
    Type: datetime
    Default: datetime(null)
  - Name: commandline_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_all
    Type: dynamic
    Default: dynamic([])
  - Name: commandline_has_any_ip_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: actingprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: targetprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: parentprocess_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: actorusername
    Type: string
    Default: '*'
  - Name: dvcipaddr_has_any_prefix
    Type: dynamic
    Default: dynamic([])
  - Name: dvcname_has_any
    Type: dynamic
    Default: dynamic([])
  - Name: eventtype
    Type: string
    Default: '*'
  - Name: disabled
    Type: bool
    Default: false
ParserQuery: |    
    let ProcessEvents=(){
    WindowsEvent | where EventID == 4689
    // --------------------------------------------------------------------------------------
    | where
    (isnull(starttime)   or TimeGenerated >= starttime )
    and (isnull(endtime) or TimeGenerated <= endtime )
    and not(disabled)
    and (array_length(actingprocess_has_any)==0) 
    and (array_length(parentprocess_has_any)==0) 
    and (array_length(dvcipaddr_has_any_prefix)==0)
    and (eventtype=='*' or eventtype=='ProcessTerminated')
    and (array_length(commandline_has_all)==0 or EventData.CommandLine has_all (commandline_has_all)) 
    and (array_length(commandline_has_any)==0 or EventData.CommandLine has_any (commandline_has_any)) 
    and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(EventData.CommandLine, commandline_has_any_ip_prefix) ) 
    and (array_length(targetprocess_has_any)==0 or EventData.ProcessName has_any (targetprocess_has_any)) 
    and (actorusername=='*' or EventData.SubjectUserName has actorusername)  
    and (array_length(dvcname_has_any)==0 or Computer has_any (dvcname_has_any))   
    // --------------------------------------------------------------------------------------
    | extend
        // Event
      EventCount = int(1),
      EventVendor = "Microsoft",
      EventProduct = "Security Events",
      EventSchemaVersion = "0.1.0",
      EventSchema = 'ProcessEvent',
      EventStartTime = todatetime(TimeGenerated),
      EventEndTime = todatetime(TimeGenerated),
      EventType = "ProcessTerminated",
      EventResult = 'Success',
      EventOriginalType = tostring(EventID),
      EventOriginalUid = EventOriginId,
      EventResultDetails = tostring(EventData.Status),
      EventOriginalResultDetails = tostring(EventData.Status), 
    // Device
      DvcId = tostring(EventData.SourceComputerId),
      DvcHostname = Computer,
      DvcOs = "Windows",
    // Users
      ActorUserId = tostring(EventData.SubjectUserSid),
      ActorUserIdType = "SID",
      ActorUsername = tostring(iff (EventData.SubjectDomainName in ('', '-'), EventData.SubjectUserName, strcat(EventData.SubjectDomainName, @"\" , EventData.SubjectUserName))),
      ActorUsernameType = iff(EventData.SubjectDomainName in ('', '-'),'Simple', 'Windows'),
      ActorSessionId = tostring(toint(EventData.SubjectLogonId)),
    // Processes 
      TargetProcessId = tostring(toint(tostring(EventData.ProcessId))),
      TargetProcessName = tostring(EventData.ProcessName),
      TargetProcessCommandLine = tostring(EventData.CommandLine),
      TargetProcessTokenElevation = tostring(EventData.TokenElevationType)
    // Aliases
        | extend 
      User = ActorUsername,
      Dvc = DvcHostname,
      Process = TargetProcessName
        | project-away EventData
      }; ProcessEvents

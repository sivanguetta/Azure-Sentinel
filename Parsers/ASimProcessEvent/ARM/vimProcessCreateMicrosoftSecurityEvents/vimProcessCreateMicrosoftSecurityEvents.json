{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "Workspace": {
      "type": "string",
      "metadata": {
        "description": "The Microsoft Sentinel workspace into which the function will be deployed. Has to be in the selected Resource Group."
      }
    },
    "WorkspaceRegion": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The region of the selected workspace. The default value will use the Region selection above."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('Workspace')]",
      "location": "[parameters('WorkspaceRegion')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimProcessCreateMicrosoftSecurityEvents",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('Workspace'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "Process Create Event ASIM parser for Windows Security Events",
            "category": "ASIM",
            "FunctionAlias": "vimProcessCreateMicrosoftSecurityEvents",
            "query": "let MandatoryLabelLookup = datatable (MandatoryLabel:string,MandatoryLabelRid:string, MandatoryLabelText:string, MandatoryLabelMeaning:string)\n  [\n    'S-1-16-0', '0x00000000', 'SECURITY_MANDATORY_UNTRUSTED_RID', 'Untrusted',\n    'S-1-16-4096', '0x00001000', 'SECURITY_MANDATORY_LOW_RID', 'Low integrity',\n    'S-1-16-8192', '0x00002000', 'SECURITY_MANDATORY_MEDIUM_RID', 'Medium integrity',\n    'S-1-16-8448', '0x00002100', 'SECURITY_MANDATORY_MEDIUM_PLUS_RID', 'Medium high integrity',\n    'S-1-16-12288', '0X00003000', 'SECURITY_MANDATORY_HIGH_RID', 'High integrity',\n    'S-1-16-16384', '0x00004000', 'SECURITY_MANDATORY_SYSTEM_RID', 'System integrity',\n    'S-1-16-20480', '0x00005000', 'SECURITY_MANDATORY_PROTECTED_PROCESS_RID', 'Protected process'\n  ];\nlet ProcessEvents=(){\nSecurityEvent\n// --------------------------------------------------------------------------------------\n| where\n  (isnull(starttime) or TimeGenerated >= starttime )\n  and (isnull(endtime) or TimeGenerated >= endtime )\n  and not(disabled)\n  and (eventtype=='*' or eventtype=='ProcessCreated')\n  and (array_length(commandline_has_all)==0 or CommandLine has_all (commandline_has_all))\n  and (array_length(commandline_has_any)==0 or CommandLine has_any (commandline_has_any))\n  and (array_length(commandline_has_any_ip_prefix)==0 or has_any_ipv4_prefix(CommandLine, commandline_has_any_ip_prefix) )\n  and (array_length(actingprocess_has_any)==0 or ParentProcessName has_any (actingprocess_has_any))\n  and (array_length(targetprocess_has_any)==0 or NewProcessName has_any (targetprocess_has_any))\n  and (array_length(parentprocess_has_any)==0)  /// ????\n  and (targetusername=='*' or TargetAccount has targetusername)\n  and (array_length(dvcipaddr_has_any_prefix)==0)\n  and (array_length(dvcname_has_any)==0 or Computer has_any (dvcname_has_any))\n// --------------------------------------------------------------------------------------\n// -- Filter\n| where EventID == 4688\n// -- Map\n| extend\n  // Event\n    EventCount = int(1),\n    EventVendor = 'Microsoft',\n    EventProduct = 'Security Events',\n    EventSchemaVersion = '0.1.0',\n    EventResult = 'Success',\n    EventStartTime = todatetime(TimeGenerated),\n    EventEndTime = todatetime(TimeGenerated),\n    EventType = 'ProcessCreated',\n    EventOriginalType = tostring(EventID),\n    EventOriginalUid = EventOriginId, \n  // Device\n    DvcId = SourceComputerId,\n    DvcHostname = Computer,\n    DvcOs = 'Windows',\n  // Users\n    ActorUserId = SubjectUserSid,\n    ActorUserIdType = 'SID',\n    ActorUsername = iff (SubjectDomainName == '-', SubjectUserName, SubjectAccount),\n    ActorUsernameType = iff(SubjectDomainName == '-','Simple', 'Windows'),\n    ActorSessionId = SubjectLogonId,\n    ActorType = AccountType, // Add?\n    ActorDomainName = SubjectDomainName,\n    TargetUserId =TargetUserSid, \n    TargetUserIdType = 'SID',\n    TargetUsername = iff (TargetDomainName == '-', TargetUserName, TargetAccount),\n    TargetUsernameType = iff (TargetDomainName == '-', 'Simple', 'Windows'),\n    TargetUserSessionId = TargetLogonId,\n  // Processes \n    ActingProcessId = tostring(toint(ProcessId)),\n    ActingProcessName = ParentProcessName,\n    TargetProcessId = tostring(toint(NewProcessId)),\n    TargetProcessName = NewProcessName,\n    TargetProcessCommandLine = CommandLine,\n    TargetProcessTokenElevation = TokenElevationType\n  | lookup MandatoryLabelLookup on MandatoryLabel \n// -- Aliases\n  | extend\n    User = TargetUsername,\n    Dvc = DvcHostname,\n    Process = TargetProcessName\n// -- Remove potentially confusing\n  | project-away \n      ParentProcessName, \n      ProcessId, \n      SubjectUserSid,\n      SubjectDomainName,\n      SubjectUserName,\n      SubjectAccount,\n      TargetUserSid,\n      TargetDomainName,\n      TargetUserName,\n      TargetAccount\n}; ProcessEvents\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), commandline_has_any:dynamic=dynamic([]), commandline_has_all:dynamic=dynamic([]), commandline_has_any_ip_prefix:dynamic=dynamic([]), actingprocess_has_any:dynamic=dynamic([]), targetprocess_has_any:dynamic=dynamic([]), parentprocess_has_any:dynamic=dynamic([]), targetusername:string='*', dvcipaddr_has_any_prefix:dynamic=dynamic([]), dvcname_has_any:dynamic=dynamic([]), eventtype:string='*', disabled:bool=False"
          }
        }
      ]
    }
  ]
}